{"ast":null,"code":"import firebase from \"firebase/app\";\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyD_J0poq1MRY-_apO03q6wdeMRXW5k5EuI\",\n  authDomain: \"sevakart-db.firebaseapp.com\",\n  databaseURL: \"https://sevakart-db.firebaseio.com\",\n  projectId: \"sevakart-db\",\n  storageBucket: \"sevakart-db.appspot.com\",\n  messagingSenderId: \"128793140837\",\n  appId: \"1:128793140837:web:9e266169089b4f0416308c\",\n  measurementId: \"G-E7ZPP9M0YL\"\n};\nexport const createUserProfileDocument = (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = userRef.get();\n  console.log(snapshot);\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error('error creating user', error);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef, \"collectionRef\");\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(obj);\n    console.log(newDocRef);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/rajatgang/Devbox/creepy/sevakart/src/firebase/utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","console","log","exists","displayName","email","createdAt","Date","set","error","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAGA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,6BAFD;AAGXC,EAAAA,WAAW,EAAE,oCAHF;AAIXC,EAAAA,SAAS,EAAE,aAJA;AAKXC,EAAAA,aAAa,EAAE,yBALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf;AAYA,OAAO,MAAMC,yBAAyB,GAAI,CAACC,QAAD,EAAWC,cAAX,KAA8B;AACpE,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAIJ,OAAO,CAACK,GAAR,EAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;;AACA,MAAG,CAACA,QAAQ,CAACI,MAAb,EAAoB;AAChB,UAAM;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBZ,QAA7B;AACA,UAAMa,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAG;AACCZ,MAAAA,OAAO,CAACa,GAAR,CAAY;AACRJ,QAAAA,WADQ;AAERC,QAAAA,KAFQ;AAGRC,QAAAA,SAHQ;AAIR,WAAGZ;AAJK,OAAZ;AAMH,KAPD,CAOC,OAAMe,KAAN,EAAY;AACTR,MAAAA,OAAO,CAACQ,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH;AACJ;;AAED,SAAOd,OAAP;AAEH,CAxBM;AA0BPb,QAAQ,CAAC4B,aAAT,CAAuB3B,MAAvB;AAIA,OAAO,MAAM4B,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACtE,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAYY,aAAZ,EAA2B,eAA3B;AAEA,QAAME,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AACAH,EAAAA,YAAY,CAACI,OAAb,CAAqBC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGL,aAAa,CAACjB,GAAd,CAAkBqB,GAAlB,CAAlB;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,SAAZ;AACH,GAHD;AAIH,CATM;AAWP,OAAO,MAAMC,IAAI,GAAGtC,QAAQ,CAACsC,IAAT,EAAb;AACP,OAAO,MAAMxB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMyB,QAAQ,GAAG,IAAIvC,QAAQ,CAACsC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAevC,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n\nconst config = {\n    apiKey: \"AIzaSyD_J0poq1MRY-_apO03q6wdeMRXW5k5EuI\",\n    authDomain: \"sevakart-db.firebaseapp.com\",\n    databaseURL: \"https://sevakart-db.firebaseio.com\",\n    projectId: \"sevakart-db\",\n    storageBucket: \"sevakart-db.appspot.com\",\n    messagingSenderId: \"128793140837\",\n    appId: \"1:128793140837:web:9e266169089b4f0416308c\",\n    measurementId: \"G-E7ZPP9M0YL\"\n};\n\n\nexport const createUserProfileDocument =  (userAuth, additionalData) => {\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapshot =  userRef.get();\n    console.log(snapshot);\n    if(!snapshot.exists){\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n\n        try{\n            userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n        }catch(error){\n            console.error('error creating user', error);\n        }\n    }\n\n    return userRef;\n\n};\n\nfirebase.initializeApp(config);\n\n\n\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n    console.log(collectionRef, \"collectionRef\");\n\n    const batch = firestore.batch();\n    objectsToAdd.forEach(obj => {\n        const newDocRef = collectionRef.doc(obj);\n        console.log(newDocRef);\n    })\n} \n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n\n"]},"metadata":{},"sourceType":"module"}